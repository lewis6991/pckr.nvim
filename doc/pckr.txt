*pckr.nvim*

Author: Lewis Russell <lewis6991@gmail.com>
Credit: Wil Thomason <wil.thomason@gmail.com>

CONTENTS                                        *pckr-contents*
Introduction                                    |pckr-introduction|
  Features                                      |pckr-intro-features|
  Requirements                                  |pckr-intro-requirements|
  Quickstart                                    |pckr-intro-quickstart|
Usage                                           |pckr-usage|
API                                             |pckr-api|
==============================================================================
INTRODUCTION                                    *pckr-introduction*

This is a Neovim plugin manager. It is designed to be:
- versatile via a declarative configuration
- fast via minimising calls to the file system (unlike native |packages|)

==============================================================================
REQUIREMENTS                                     *pckr-intro-requirements*

- You need to be running Neovim v0.9 or newer.
- If you are on Windows 10, you need developer mode enabled in order to use
  local plugins (creating symbolic links requires admin privileges on Windows
  - credit to @TimUntersberger for this note)

==============================================================================
QUICKSTART                                                    *pckr-quickstart*

To get started, first clone this repository to somewhere on your `packpath`, e.g.: >bash
  git clone https://github.com/lewis6991/pckr.nvim\
   ~/.local/share/nvim/site/pack/pckr/opt/pckr.nvim


Then you can write your plugin specification in Lua, e.g. (in `~/.config/nvim/lua/plugins.lua`): >lua

  local cmd = require('pckr.loader.cmd')
  local keys = require('pckr.loader.keys')

  require('pckr').add{
    -- pckr can manage itself
    'wbthomason/pckr.nvim';

    -- Simple plugins can be specified as strings
    '9mm/vim-closer';

    -- Lazy loading:
    -- Load on specific commands
    {'tpope/vim-dispatch',
      cond = { cmd('Dispatch') }
    };

    -- Load on specific keymap
    {'tpope/vim-commentary', cond = keys('n', 'gc') },

    -- Load on specific commands
    -- Also run code after load (see the "config" key)
    { 'w0rp/ale',
      cond = cmd('ALEEnable'),
      config = function()
        vim.cmd[[ALEEnable]]
      end
    };

    -- Local plugins can be included
    '~/projects/personal/hover.nvim';

    -- Plugins can have post-install/update hooks
    {'iamcco/markdown-preview.nvim', run = 'cd app && yarn install', cond = cmd('MarkdownPreview')};

    -- Post-install/update hook with neovim command
    -- Install plugin as a 'start' plugin
    { 'nvim-treesitter/nvim-treesitter', run = ':TSUpdate', start = true };

    -- Post-install/update hook with call of vimscript function with argument
    { 'glacambre/firenvim', run = function()
      vim.fn['firenvim#install'](0)
    end };

    -- Use specific branch, dependency and run lua file after load
    { 'glepnir/galaxyline.nvim',
      branch = 'main',
      requires = {'kyazdani42/nvim-web-devicons'},
      config = function()
        require'statusline'
      end
    };

    -- Run config *before* the plugin is loaded
    {'whatyouhide/vim-lengthmatters', config_pre = function()
      vim.g.lengthmatters_highlight_one_column = 1
      vim.g.lengthmatters_excluded = {'pckr'}
    end},
  }


`pckr` provides the following commands: *pckr-default-commands* *pckr-commands*

`Pckr `                                                            *pckr-command*
Show Pckr dashboard.

`Pckr status`                                              *pckr-commands-status*
Show Pckr dashboard.

`Pckr clean`                                                *pckr-commands-clean*
Remove any disabled or unused plugins.

`Pckr install`                                            *pckr-commands-install*
Install missing plugins.

`Pckr uninstall`                                        *pckr-commands-uninstall*
Uninstall plugins.

`Pckr update`                                              *pckr-commands-update*
Update installed plugins.

`Pckr sync`                                                  *pckr-commands-sync*
- Clean plugins
- Install missing plugins
- Update installed plugins
- Upgrade pckr

`Pckr lock`                                                  *pckr-commands-lock*
TODO

`Pckr restore`                                            *pckr-commands-restore*
TODO

==============================================================================
USAGE                                                              *pckr-usage*

Although the example in |pckr-intro-quickstart| will be enough to get you
going for basic usage, `pckr` has a number of other features and options
detailed in this section.

==============================================================================
STARTUP                                                          *pckr-startup*

The easiest way to use `pckr` is via the |pckr.add()| function.
`spec` should be a table containing a list of plugin specs: >lua

  pckr.add{
    {'tjdevries/colorbuddy.vim', config = function() ... end}
  }

<

Configuration can be provided via |pckr.setup()|: >lua

  pckr.setup{
    -- YOUR CONFIG HERE --
  }

See |pckr-configuration| for the allowed configuration keys.


==============================================================================
CONFIGURATION                                              *pckr-configuration*
`pckr` provides the following configuration variables, presented in the
structure of the `config` table expected by `startup` or `init`, with their
default values: >lua
  {
    pack_dir = util.join_paths(vim.fn.stdpath('data'), 'site'),
    max_jobs = nil, -- Limit the number of simultaneous jobs. nil means no limit
    git = {
      cmd                = 'git', -- The base command for git operations
      clone_timeout      = 60, -- Timeout, in seconds, for git clones
      default_url_format = 'https://github.com/%s' -- Lua format string used for "aaa/bbb" style plugins
    },
    log = { level = 'warn' }, -- The default print log level. One of: "trace", "debug", "info", "warn", "error", "fatal".
    display = {
      non_interactive = false, -- If true, disable display windows for all operations
      working_sym     = '⟳', -- The symbol for a plugin being installed/updated
      error_sym       = '✗', -- The symbol for a plugin with an error in installation/updating
      done_sym        = '✓', -- The symbol for a plugin which has completed installation/updating
      removed_sym     = '-', -- The symbol for an unused plugin which was removed
      moved_sym       = '→', -- The symbol for a plugin which was moved (e.g. from opt to start)
      header_sym      = '━', -- The symbol for the header line in pckr's display
      show_all_info   = true, -- Should pckr show all update details automatically?
      prompt_border   = 'double', -- Border style of prompt popups.
      keybindings = { -- Keybindings for the display window
        quit          = 'q',
        toggle_update = 'u', -- only in preview
        continue      = 'c', -- only in preview
        toggle_info   = '<CR>',
        diff          = 'd',
        prompt_revert = 'r',
      }
    }
  }

<

==============================================================================
SPECIFYING PLUGINS                                    *pckr-specifying-plugins*

`pckr` is based around declarative specification of plugins. You can declare
a plugin using the function |pckr.add()|.

`add` takes a list of plugin specifications (strings or tables)

Plugin locations may be specified as:
  1. Absolute paths to a local plugin
  2. Full URLs (treated as plugins managed with `git`)
  3. `username/repo` paths (treated as Github `git` plugins)

==============================================================================
CONFIGURING PLUGINS                                 *pckr-plugin-configuration*

`pckr` allows you to configure plugins either before they are loaded (the
`config_pre` key described in |pckr.add()|) or after they are loaded (the
`config` key described in |pckr.add()|).

==============================================================================
POST-UPDATE HOOKS                                           *pckr-plugin-hooks*

You may specify operations to be run after successful installs/updates of a
plugin with the `run` key. This key may either be a Lua function, which will be
called with the `plugin` table for this plugin (containing the information
passed to `use` as well as output from the installation/update commands, the
installation path of the plugin, etc.), a string, or a table of functions and
strings.

If an element of `run` is a string, then either:

1. If the first character of `run` is ":", it is treated as a Neovim command and
executed.
2. Otherwise, `run` is treated as a shell command and run in the installation
directory of the plugin via `$SHELL -c '<run>'`.

==============================================================================
DEPENDENCIES                                         *pckr-plugin-dependencies*

Plugins may specify dependencies via the `requires` key in their specification
table. This key can be a string or a list (table).

If `requires` is a string, it is treated as specifying a single plugin. If a
plugin with the name given in `requires` is already known in the managed set,
nothing happens. Otherwise, the string is treated as a plugin location string
and the corresponding plugin is added to the managed set.

If `requires` is a list, it is treated as a list of plugin specifications
following the format given above.

If `ensure_dependencies` is true, the plugins specified in `requires` will be
installed.

Plugins specified in `requires` are removed when no active plugins require
them.

==============================================================================
RESULTS WINDOW KEYBINDINGS                           *pckr-results-keybindings*

Once an operation completes, the results are shown in the display window.
`pckr` sets up default keybindings for this window:

q                    close the display window
<CR>                 toggle information about a particular plugin
r                    revert an update

They can be configured by changing the value of `config.display.keybindings`
(see |pckr-configuration|). Setting it to `false` will disable all keybindings.
Setting any of its keys to `false` will disable the corresponding keybinding.

==============================================================================
API                                                                  *pckr-api*

setup({config})                                                  *pckr.setup()*
    Setup and configure pckr.

    If the user does not call this it will be called internally by
    |pckr.add()|.


add({spec})                                                        *pckr.add()*
    `add` allows you to add one or more plugins to the managed set. It can be
    invoked as follows:
    - With a single plugin specification table, e.g. >lua
      {
        'myusername/example',    -- The plugin location string

        -- The following keys are all optional
        branch     : string,                 -- Specifies a git branch to use
        tag        : string,                 -- Specifies a git tag to use. Supports '*' for "latest tag"
        commit     : string,                 -- Specifies a git commit to use
        lock       : boolean,                -- Skip updating this plugin in updates/syncs. Still cleans.
        run        : string|function|table,  -- Post-update/install hook. See "update/install hooks".
        requires   : string|string[],        -- Specifies plugin dependencies. See "dependencies".
        config_pre : string|function,        -- Specifies code to run before this plugin is loaded.
        config     : string|function,        -- Specifies code to run after this plugin is loaded.
        cond       : function|function[],    -- Specifies custom loader
      }
<

    - With a list of plugins specified in either of the above two forms


install({plugins}, {opts}, {callback})                         *pckr.install()*
    Installs missing plugins, then updates helptags.

    Attributes: ~
        {async}

    Parameters: ~
      • {plugins} (`string[]?`) Plugins to install
      • {opts}  (`table?`) Options (RFU)
      • {callback} (`function`)

uninstall({plugins}, {opts}, {callback})                       *pckr.uninstall()*
    Uninstall plugins.

    Attributes: ~
        {async}

    Parameters: ~
      • {plugins} (`string[]?`) Plugins to uninstall
      • {opts}  (`table?`) Options (RFU)
      • {callback} (`function`)

update({plugins}, {opts}, {callback})                           *pckr.update()*
    Takes an optional list of plugin names as an argument. If no list is
    given, operates on all managed plugins then updates installed plugins and
    updates helptags.

    Attributes: ~
        {async}

    Parameters: ~
      • {plugins} (`string[]?`) Plugins to update
      • {opts}  (`table?`) Options (RFU)
      • {callback} (`function`)


upgrade({_}, {opts}, {callback})                           *pckr.upgrade()*
    Upgrade pckr.nvim

    Attributes: ~
        {async}

    Parameters: ~
      • {_} RFU
      • {opts}  (`table?`) Options (RFU)
      • {callback} (`function`)


sync({plugins}, {opts}, {callback})                               *pckr.sync()*
    Takes an optional list of plugin names as an argument. If no list is
    given, operates on all managed plugins.

    - Installs missing plugins
    - Updates plugins
    - Updates helptags
    - Upgrade pckr.nvim

    Attributes: ~
        {async}

    Parameters: ~
      • {plugins} (`string[]?`) Plugins to sync
      • {opts}  (`table?`) Options (RFU)
      • {callback} (`function`)


clean({_}, {opts}, {callback})                                   *pckr.clean()*
    Removes plugins present in the `pckr` package but not in the managed set.

    Attributes: ~
        {async}

    Parameters: ~
      • {_} RFU
      • {opts}  (`table?`) Options (RFU)
      • {callback} (`function`)


status({_}, {opts}, {callback})                                 *pckr.status()*

    Attributes: ~
        {async}

    Parameters: ~
      • {_} RFU
      • {opts}  (`table?`) Options (RFU)
      • {callback} (`function`)


lock({_}, {opts}, {callback})                                     *pckr.lock()*

    Attributes: ~
        {async}

    Parameters: ~
      • {_} RFU
      • {opts}  (`table?`) Options (RFU)
      • {callback} (`function`)


restore({_}, {opts}, {callback})                               *pckr.restore()*

    Attributes: ~
        {async}

    Parameters: ~
      • {_} RFU
      • {opts}  (`table?`) Options (RFU)
      • {callback} (`function`)


log({_}, {opts})                                                   *pckr.log()*

    Parameters: ~
      • {_} RFU
      • {opts}  (`table?`) Options (RFU)


 vim:tw=78:ts=2:ft=help:norl:
